"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../utils");
var _DayCell = _interopRequireDefault(require("../DayCell"));
var _dateFns = require("date-fns");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
var _default = exports.default = /*#__PURE__*/(0, _react.memo)(function Month(_ref) {
  let {
    style,
    styles,
    month,
    drag,
    dateOptions,
    disabledDates,
    disabledDay,
    preview,
    showPreview,
    date,
    displayMode,
    minDate,
    maxDate,
    ranges,
    color,
    focusedRange,
    onDragSelectionStart,
    onDragSelectionEnd,
    onDragSelectionMove,
    onMouseLeave,
    onPreviewChange,
    monthDisplayFormat,
    weekdayDisplayFormat,
    dayDisplayFormat,
    showWeekDays,
    showMonthName,
    fixedHeight,
    dayContentRenderer
  } = _ref;
  const now = new Date();
  const minDateInternal = !!minDate && (0, _dateFns.startOfDay)(minDate);
  const maxDateInternal = !!maxDate && (0, _dateFns.endOfDay)(maxDate);
  let newMonthDisplayDate = month;
  if (maxDate && (maxDate.getFullYear() < month.getFullYear() || maxDate.getFullYear() == month.getFullYear() && maxDate.getMonth() < month.getMonth())) {
    newMonthDisplayDate = (0, _dateFns.startOfMonth)(maxDate);
  }
  const monthDisplay = (0, _utils.getMonthDisplayRange)(newMonthDisplayDate, dateOptions, fixedHeight);
  let rangesInternal = ranges;
  if (displayMode == 'dateRange' && drag.status) {
    const {
      startDate,
      endDate
    } = drag.range;
    rangesInternal = rangesInternal.map((range, i) => {
      if (i !== focusedRange[0]) return range;
      return {
        ...range,
        startDate,
        endDate
      };
    });
  }
  const showPreviewInternal = showPreview && !drag.disablePreview;
  return /*#__PURE__*/_react.default.createElement("div", {
    className: styles.month,
    style: style
  }, showMonthName ? /*#__PURE__*/_react.default.createElement("div", {
    className: styles.monthName
  }, (0, _dateFns.format)(month, monthDisplayFormat, dateOptions)) : null, showWeekDays ? /*#__PURE__*/_react.default.createElement(Weekdays, {
    styles: styles,
    dateOptions: dateOptions,
    weekdayDisplayFormat: weekdayDisplayFormat
  }) : null, /*#__PURE__*/_react.default.createElement("div", {
    className: styles.days,
    onMouseLeave: onMouseLeave
  }, (0, _dateFns.eachDayOfInterval)({
    start: monthDisplay.start,
    end: monthDisplay.end
  }).map((day, index) => {
    const isStartOfMonth = (0, _dateFns.isSameDay)(day, monthDisplay.startDateOfMonth);
    const isEndOfMonth = (0, _dateFns.isSameDay)(day, monthDisplay.endDateOfMonth);
    const isOutsideMinMax = minDateInternal && (0, _dateFns.isBefore)(day, minDateInternal) || maxDateInternal && (0, _dateFns.isAfter)(day, maxDateInternal);
    const isDisabledSpecifically = disabledDates.some(disabledDate => (0, _dateFns.isSameDay)(disabledDate, day));
    const isDisabledDay = disabledDay(day);
    return /*#__PURE__*/_react.default.createElement(_DayCell.default, {
      date: date,
      dayContentRenderer: dayContentRenderer,
      key: index,
      onPreviewChange: onPreviewChange,
      displayMode: displayMode,
      color: color,
      dayDisplayFormat: dayDisplayFormat,
      ranges: rangesInternal,
      day: day,
      preview: showPreviewInternal ? preview : null,
      isWeekend: (0, _dateFns.isWeekend)(day),
      isToday: (0, _dateFns.isSameDay)(day, now),
      isStartOfWeek: (0, _dateFns.isSameDay)(day, (0, _dateFns.startOfWeek)(day, dateOptions)),
      isEndOfWeek: (0, _dateFns.isSameDay)(day, (0, _dateFns.endOfWeek)(day, dateOptions)),
      isStartOfMonth: isStartOfMonth,
      isEndOfMonth: isEndOfMonth,
      disabled: isOutsideMinMax || isDisabledSpecifically || isDisabledDay,
      isPassive: !(0, _dateFns.isWithinInterval)(day, {
        start: monthDisplay.startDateOfMonth,
        end: monthDisplay.endDateOfMonth
      }),
      styles: styles,
      onMouseDown: onDragSelectionStart,
      onMouseUp: onDragSelectionEnd,
      onMouseEnter: onDragSelectionMove
    });
  })));
});
function Weekdays(_ref2) {
  let {
    styles,
    dateOptions,
    weekdayDisplayFormat
  } = _ref2;
  const now = new Date();
  return /*#__PURE__*/_react.default.createElement("div", {
    className: styles.weekDays
  }, (0, _dateFns.eachDayOfInterval)({
    start: (0, _dateFns.startOfWeek)(now, dateOptions),
    end: (0, _dateFns.endOfWeek)(now, dateOptions)
  }).map((day, i) => {
    return /*#__PURE__*/_react.default.createElement("span", {
      className: styles.weekDay,
      key: i
    }, (0, _dateFns.format)(day, weekdayDisplayFormat, dateOptions));
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,