"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DateRange;
var _react = _interopRequireDefault(require("react"));
var _Calendar = _interopRequireDefault(require("../Calendar"));
var _utils = require("../../utils");
var _styles = _interopRequireDefault(require("../../styles"));
var _dateFns = require("date-fns");
var _classnames = _interopRequireDefault(require("classnames"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function DateRange(_ref) {
  let {
    ariaLabels,
    weekStartsOn,
    weekdayDisplayFormat,
    editableDateInputs,
    endDatePlaceholder,
    showMonthAndYearPickers,
    onShownDateChange,
    preventSnapRefocus,
    preview,
    scroll,
    showDateDisplay,
    showMonthArrow,
    showPreview,
    shownDate,
    startDatePlaceholder,
    date,
    dateDisplayFormat,
    dayContentRenderer,
    dayDisplayFormat,
    direction,
    disabledDay,
    dragSelectionEnabled,
    fixedHeight,
    locale,
    calendarFocus,
    className,
    monthDisplayFormat,
    months,
    onChange,
    classNames = {},
    ranges = [],
    moveRangeOnFirstSelection = false,
    retainEndDateOnFirstSelection = false,
    rangeColors = ['#3d91ff', '#3ecf8e', '#fed14c'],
    disabledDates = [],
    initialFocusedRange,
    focusedRange,
    maxDate,
    minDate,
    onRangeFocusChange,
    color,
    previewRange
  } = _ref;
  const refs = _react.default.useRef({
    styles: (0, _utils.generateStyles)([_styles.default, classNames])
  });
  const [state, setState] = _react.default.useState({
    focusedRange: initialFocusedRange || [(0, _utils.findNextRangeIndex)(ranges, 0)],
    preview: null
  });
  _react.default.useEffect(() => {
    updatePreview(previewRange ? calcNewSelection(previewRange, !previewRange.endDate) : null);
  }, [previewRange]);
  const calcNewSelection = function (value) {
    let isSingleValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    const focusedRangeInternal = focusedRange || state.focusedRange;
    const focusedRangeIndex = focusedRangeInternal[0];
    const selectedRange = ranges[focusedRangeIndex];
    if (!selectedRange || !onChange) return {};
    let {
      startDate,
      endDate
    } = selectedRange;
    const now = new Date();
    let nextFocusRange;
    if (!isSingleValue) {
      startDate = value.startDate;
      endDate = value.endDate;
    } else if (focusedRangeInternal[1] === 0) {
      const dayOffset = (0, _dateFns.differenceInCalendarDays)(endDate || now, startDate);
      const calculateEndDate = () => {
        if (moveRangeOnFirstSelection) {
          return (0, _dateFns.addDays)(value, dayOffset);
        }
        if (retainEndDateOnFirstSelection) {
          if (!endDate || (0, _dateFns.isBefore)(value, endDate)) {
            return endDate;
          }
          return value;
        }
        return value || now;
      };
      startDate = value;
      endDate = calculateEndDate();
      if (maxDate) endDate = (0, _dateFns.min)([endDate, maxDate]);
      nextFocusRange = [focusedRangeInternal[0], 1];
    } else {
      endDate = value;
    }

    // reverse dates if startDate before endDate
    let isStartDateSelected = focusedRangeInternal[1] === 0;
    if ((0, _dateFns.isBefore)(endDate, startDate)) {
      isStartDateSelected = !isStartDateSelected;
      [startDate, endDate] = [endDate, startDate];
    }
    const inValidDatesWithinRange = disabledDates.filter(disabledDate => (0, _dateFns.isWithinInterval)(disabledDate, {
      start: startDate,
      end: endDate
    }));
    if (inValidDatesWithinRange.length > 0) {
      if (isStartDateSelected) {
        startDate = (0, _dateFns.addDays)((0, _dateFns.max)(inValidDatesWithinRange), 1);
      } else {
        endDate = (0, _dateFns.addDays)((0, _dateFns.min)(inValidDatesWithinRange), -1);
      }
    }
    if (!nextFocusRange) {
      const nextFocusRangeIndex = (0, _utils.findNextRangeIndex)(ranges, focusedRangeInternal[0]);
      nextFocusRange = [nextFocusRangeIndex, 0];
    }
    return {
      wasValid: !(inValidDatesWithinRange.length > 0),
      range: {
        startDate,
        endDate
      },
      nextFocusRange: nextFocusRange
    };
  };
  const setSelection = (value, isSingleValue) => {
    const focusedRangeIndex = (focusedRange || state.focusedRange)[0];
    const selectedRange = ranges[focusedRangeIndex];
    if (!selectedRange || !onChange) return;
    const newSelection = calcNewSelection(value, isSingleValue);
    const toChange = {
      [selectedRange.key || `range${focusedRangeIndex + 1}`]: {
        ...selectedRange,
        ...newSelection.range
      }
    };
    onChange?.(toChange);
    setState(s => ({
      ...s,
      focusedRange: newSelection.nextFocusRange,
      preview: null
    }));
    onRangeFocusChange?.(newSelection.nextFocusRange);
  };
  const handleRangeFocusChange = focusedRange => {
    setState(s => ({
      ...s,
      focusedRange
    }));
    onRangeFocusChange?.(focusedRange);
  };
  const updatePreview = val => {
    if (!val) {
      setState(s => ({
        ...s,
        preview: null
      }));
      return;
    }
    const focusedRangeInternal = focusedRange || state.focusedRange;
    const colorInternal = ranges[focusedRangeInternal[0]]?.color || rangeColors[focusedRangeInternal[0]] || color;
    setState(s => ({
      ...s,
      preview: {
        ...val.range,
        color: colorInternal
      }
    }));
  };
  return /*#__PURE__*/_react.default.createElement(_Calendar.default, {
    focusedRange: focusedRange || state.focusedRange,
    onRangeFocusChange: handleRangeFocusChange,
    preview: preview || state.preview,
    onPreviewChange: value => {
      updatePreview(value ? calcNewSelection(value) : null);
    },
    ariaLabels: ariaLabels,
    weekStartsOn: weekStartsOn,
    weekdayDisplayFormat: weekdayDisplayFormat,
    editableDateInputs: editableDateInputs,
    endDatePlaceholder: endDatePlaceholder,
    showMonthAndYearPickers: showMonthAndYearPickers,
    onShownDateChange: onShownDateChange,
    preventSnapRefocus: preventSnapRefocus,
    scroll: scroll,
    showDateDisplay: showDateDisplay,
    showMonthArrow: showMonthArrow,
    showPreview: showPreview,
    shownDate: shownDate,
    startDatePlaceholder: startDatePlaceholder,
    date: date,
    dateDisplayFormat: dateDisplayFormat,
    dayContentRenderer: dayContentRenderer,
    dayDisplayFormat: dayDisplayFormat,
    direction: direction,
    disabledDay: disabledDay,
    dragSelectionEnabled: dragSelectionEnabled,
    fixedHeight: fixedHeight,
    locale: locale,
    calendarFocus: calendarFocus,
    displayMode: "dateRange",
    className: (0, _classnames.default)(refs.current.styles.dateRangeWrapper, className),
    onChange: setSelection,
    updateRange: val => setSelection(val, false),
    monthDisplayFormat: monthDisplayFormat,
    months: months,
    classNames: classNames,
    ranges: ranges,
    rangeColors: rangeColors,
    disabledDates: disabledDates,
    initialFocusedRange: initialFocusedRange,
    maxDate: maxDate,
    minDate: minDate,
    color: color
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,