"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DefinedRange;
var _react = _interopRequireDefault(require("react"));
var _classnames = _interopRequireDefault(require("classnames"));
var _styles = _interopRequireDefault(require("../../styles"));
var _defaultRanges = require("../../defaultRanges");
var _InputRangeField = _interopRequireDefault(require("../InputRangeField"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function DefinedRange(_ref) {
  let {
    className,
    headerContent,
    footerContent,
    inputRanges = _defaultRanges.defaultInputRanges,
    staticRanges = _defaultRanges.defaultStaticRanges,
    rangeColors = ['#3d91ff', '#3ecf8e', '#fed14c'],
    ranges = [],
    focusedRange = [0, 0],
    onChange,
    onPreviewChange,
    renderStaticRangeLabel
  } = _ref;
  const [state, setState] = _react.default.useState({
    rangeOffset: 0,
    focusedInput: -1
  });
  const getSelectedRange = (ranges, staticRange) => {
    const focusedRangeIndex = ranges.findIndex(range => {
      if (!range.startDate || !range.endDate || range.disabled) {
        return false;
      }
      return staticRange.isSelected(range);
    });
    const selectedRange = ranges[focusedRangeIndex];
    return {
      selectedRange,
      focusedRangeIndex
    };
  };
  const handleRangeChange = range => {
    const selectedRange = ranges[focusedRange[0]];
    if (!onChange || !selectedRange) {
      return;
    }
    onChange({
      [selectedRange.key || `range${focusedRange[0] + 1}`]: {
        ...selectedRange,
        ...range
      }
    });
  };
  const getRangeOptionValue = option => {
    if (typeof option.getCurrentValue !== 'function') {
      return '';
    }
    const selectedRange = ranges[focusedRange[0]] || {
      startDate: new Date(),
      endDate: new Date()
    };
    return option.getCurrentValue(selectedRange) || '';
  };
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(_styles.default.definedRangesWrapper, className)
  }, headerContent, /*#__PURE__*/_react.default.createElement("div", {
    className: _styles.default.staticRanges
  }, staticRanges.map((staticRange, i) => {
    const {
      selectedRange,
      focusedRangeIndex
    } = getSelectedRange(ranges, staticRange);
    let labelContent = "";
    if (staticRange.hasCustomRendering) {
      labelContent = renderStaticRangeLabel(staticRange);
    } else {
      labelContent = staticRange.label;
    }
    return /*#__PURE__*/_react.default.createElement("button", {
      type: "button",
      className: (0, _classnames.default)(_styles.default.staticRange, {
        [_styles.default.staticRangeSelected]: Boolean(selectedRange)
      }),
      style: {
        color: selectedRange ? selectedRange.color || rangeColors[focusedRangeIndex] : null
      },
      key: i,
      onClick: () => handleRangeChange(staticRange.range()),
      onFocus: () => onPreviewChange && onPreviewChange(staticRange.range()),
      onMouseOver: () => onPreviewChange && onPreviewChange(staticRange.range()),
      onMouseLeave: () => onPreviewChange && onPreviewChange()
    }, /*#__PURE__*/_react.default.createElement("span", {
      tabIndex: -1,
      className: _styles.default.staticRangeLabel
    }, labelContent));
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: _styles.default.inputRanges
  }, inputRanges.map((rangeOption, i) => /*#__PURE__*/_react.default.createElement(_InputRangeField.default, {
    key: i,
    styles: _styles.default,
    label: rangeOption.label,
    onFocus: () => setState({
      focusedInput: i,
      rangeOffset: 0
    }),
    onBlur: () => setState({
      ...state,
      rangeOffset: 0
    }),
    onChange: value => handleRangeChange(rangeOption.range(value)),
    value: getRangeOptionValue(rangeOption)
  }))), footerContent);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,