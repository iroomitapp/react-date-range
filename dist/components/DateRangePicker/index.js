"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = DateRangePicker;
var _react = _interopRequireDefault(require("react"));
var _DefinedRange = _interopRequireDefault(require("../DefinedRange"));
var _utils = require("../../utils");
var _styles = _interopRequireDefault(require("../../styles"));
var _classnames = _interopRequireDefault(require("classnames"));
var _DateRange = _interopRequireDefault(require("../DateRange"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function DateRangePicker(_ref) {
  let {
    weekStartsOn,
    weekdayDisplayFormat,
    editableDateInputs,
    endDatePlaceholder,
    rangeColors,
    ranges,
    renderStaticRangeLabel,
    retainEndDateOnFirstSelection,
    showMonthAndYearPickers,
    updateRange,
    initialFocusedRange,
    ariaLabels,
    scroll,
    showDateDisplay,
    showMonthArrow,
    showPreview,
    shownDate,
    startDatePlaceholder,
    date,
    dateDisplayFormat,
    dayContentRenderer,
    dayDisplayFormat,
    direction,
    disabledDates,
    disabledDay,
    displayMode,
    dragSelectionEnabled,
    fixedHeight,
    focusedRange,
    onChange,
    footerContent,
    headerContent,
    locale,
    calendarFocus,
    className,
    classNames,
    color,
    maxDate,
    minDate,
    monthDisplayFormat,
    months,
    moveRangeOnFirstSelection,
    preventScrollToFocusedMonth
  } = _ref;
  const refs = _react.default.useRef({
    styles: (0, _utils.generateStyles)([_styles.default, classNames])
  });
  const [state, setState] = _react.default.useState({
    focusedRange: [(0, _utils.findNextRangeIndex)(ranges), 0],
    rangePreview: undefined
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    className: (0, _classnames.default)(refs.current.styles.dateRangePickerWrapper, className)
  }, /*#__PURE__*/_react.default.createElement(_DefinedRange.default, {
    focusedRange: focusedRange || state.focusedRange,
    rangeColors: rangeColors,
    onChange: onChange,
    ranges: ranges,
    renderStaticRangeLabel: renderStaticRangeLabel,
    headerContent: headerContent,
    footerContent: footerContent
  }), /*#__PURE__*/_react.default.createElement(_DateRange.default, {
    onRangeFocusChange: focusedRange => setState(s => ({
      ...s,
      focusedRange
    })),
    focusedRange: focusedRange || state.focusedRange,
    weekStartsOn: weekStartsOn,
    weekdayDisplayFormat: weekdayDisplayFormat,
    editableDateInputs: editableDateInputs,
    endDatePlaceholder: endDatePlaceholder,
    rangeColors: rangeColors,
    ranges: ranges,
    retainEndDateOnFirstSelection: retainEndDateOnFirstSelection,
    showMonthAndYearPickers: showMonthAndYearPickers,
    updateRange: updateRange,
    initialFocusedRange: initialFocusedRange,
    ariaLabels: ariaLabels,
    scroll: scroll,
    showDateDisplay: showDateDisplay,
    showMonthArrow: showMonthArrow,
    onChange: onChange,
    showPreview: showPreview,
    shownDate: shownDate,
    startDatePlaceholder: startDatePlaceholder,
    date: date,
    dateDisplayFormat: dateDisplayFormat,
    dayContentRenderer: dayContentRenderer,
    dayDisplayFormat: dayDisplayFormat,
    direction: direction,
    disabledDates: disabledDates,
    disabledDay: disabledDay,
    displayMode: displayMode,
    dragSelectionEnabled: dragSelectionEnabled,
    fixedHeight: fixedHeight,
    locale: locale,
    calendarFocus: calendarFocus,
    previewRange: state.rangePreview,
    classNames: classNames,
    color: color,
    maxDate: maxDate,
    minDate: minDate,
    monthDisplayFormat: monthDisplayFormat,
    months: months,
    moveRangeOnFirstSelection: moveRangeOnFirstSelection,
    preventScrollToFocusedMonth: preventScrollToFocusedMonth
  }));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,